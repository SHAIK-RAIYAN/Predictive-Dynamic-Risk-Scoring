version: '3.8'

services:
  # Frontend and Backend combined service
  risk-scoring-app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - JAVA_OPTS=-Xmx2g -Xms1g
    volumes:
      - app-logs:/var/log/nginx
      - app-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/risk/dashboard/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - risk-scoring-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - risk-scoring-network

  # PostgreSQL for production database (optional)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: risk_scoring
      POSTGRES_USER: risk_user
      POSTGRES_PASSWORD: secure_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - risk-scoring-network

  # Nginx reverse proxy (optional, for load balancing)
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - risk-scoring-app
    restart: unless-stopped
    networks:
      - risk-scoring-network

volumes:
  app-logs:
  app-data:
  redis-data:
  postgres-data:

networks:
  risk-scoring-network:
    driver: bridge 